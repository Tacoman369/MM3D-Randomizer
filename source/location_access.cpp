namespace Areas {

	static std:array<const AreaKey, X> allAreas = {
	ROOT,
	ROOT_EXITS,
	CLOCK_TOWN,
	CLOCK_TOWER,
	N_CLOCK_TOWN,
	E_CLOCK_TOWN,
	W_CLOCK_TOWN,
	S_CLOCK_TOWN,
	CLOCK_TOWN_BAR,
	CLOCK_TOWN_ARCHREY,
	CLOCK_TOWN_MAYOR_HOUSE,
	CLOCK_TOWN_HONEY_DARLING,
	CLOCK_TOWN_TREASURE_CHEST_GAME,
	CLOCK_TOWN_POSTMAN_HOUSE,
	CLOCK_TOWN_BOMBERS_HIDEOUT,
	CLOCK_TOWN_OBSERVATORY,
	CLOCK_TOWN_FAIRY_FOUNTAIN,
	CLOCK_TOWN_SWORDSMANS_SCHOOL,
	CLOCK_TOWN_BOMB_SHOP,
	CLOCK_TOWN_TRADING_POST,
	CLOCK_TOWN_CURIOSITY_SHOP,
	CLOCK_TOWN_BANK,
	CLOCK_TOWN_DEKU_PLAYGROUND,
	CUCCO_SHACK,
	DOGGY_RACETRACK,
	GORMAN_TRACK,
	SWAMP_TOURIST_CENTER,
	HAGS_POTION_SHOP,
	MYSTERY_WOODS,
	DEKU_PALACE,
	DEKU_PALACE_BEAN_GROTTO,
	DEKU_PALACE_WEST_GARDEN,
	DEKU_PALACE_INTERIOR,
	DEKU_SHRINE,
	MOUNTAIN_SMITHY,
	GORON_GRAVEYARD,
	GORON_RACETRACK,
	GORON_KEG_SHOP,
	GORON_SHOP,
	FISHERMAN_HUT,
	MARINE_LAB,
	ZORA_SHOP,
	WATERFALL_RAPIDS,
	SPRING_WATER_CAVE,
	MUSIC_BOX_HOUSE,
	SPIRIT_HOUSE,
	SAKONS_HIDEOUT,
	IKANA_FAIRY_FOUNTAIN,
	GREAT_BAY_FAIRY_FOUNTAIN,
	WOODFALL_FAIRY_FOUNTAIN,
	WOODFALL_TEMPLE,
	WOODFALL_TEMPLE_ENTRANCE,
	WOODFALL_TEMPLE_MAIN_ROOM,
	WOODFALL_TEMPLE_PRE_BOSS_ROOM,
	WOODFALL_TEMPLE_BRIDGE_ROOM,
	WOODFALL_TEMPLE_PLATFORM_ROOM,
	WOODFALL_TEMPLE_BOW_ROOM,
	WOODFALL_TEMPLE_MINI_BOSS_ROOM,
	WOODFALL_TEMPLE_BOSS_ROOM,
	SNOWHEAD_TEMPLE,
	SNOWHEAD_TEMPLE_ENTRANCE,
	SNOWHEAD_TEMPLE_BLOCK_ROOM,
	SNOWHEAD_TEMPLE_ICICLE_ROOM,
	SNOWHEAD_TEMPLE_BRIDGE_ROOM,
	SNOWHEAD_DINOLFOS_ROOM,
	SNOWHEAD_TEMPLE_MAP_ROOM,
	SNOWHEAD_TEMPLE_BASEMENT,
	SNOWHEAD_TEMPLE_PILLAR,
	SNOWHEAD_TEMPLE_ICE_PUZZLE,
	SNOWHEAD_TEMPLE_WIZZROBE_ROOM,
	SNOWHEAD_TEMPLE_BOSS_ROOM,
	SNOWHEAD_FAIRY_FOUNTAIN,
	GBT,
	GBT_WATER_CONTROL_ROOM,
	GBT_BOSS_ROOM,
	GBT_MINI_BOSS_ROOM,
	GBT_SEESAW_ROOM,
	GBT_ENTRANCE,
	GBT_WHIRLPOOL_ROOM,
	GBT_PRE_BOSS_ROOM,
	GBT_BIO_BABA_ROOM,
	GBT_WATER_WHEEL_ROOM,
	GREAT_BAY_TEMPLE_WATER_CONTROL_ROOM,
	GREAT_BAY_TEMPLE,
	GREAT_BAY_TEMPLE_BOSS_ROOM,
	GREAT_BAY_TEMPLE_MINI_BOSS_ROOM,
	GREAT_BAY_TEMPLE_SEESAW_ROOM,
	GREAT_BAY_TEMPLE_ENTRANCE,
	GREAT_BAY_TEMPLE_WHIRLPOOL_ROOM,
	GREAT_BAY_TEMPLE_PRE_BOSS_ROOM,
	GREAT_BAY_TEMPLE_BIO_BABA_ROOM,
	GREAT_BAY_TEMPLE_WATER_WHEEL_ROOM,
	STONE_TOWER_TEMPLE,
	STONE_TOWER_TEMPLE_BOSS_ROOM,
	STONE_TOWER_TEMPLE_LAVA_ROOM,
	STONE_TOWER_TEMPLE_BLOCK_ROOM,
	STONE_TOWER_TEMPLE_WATER_ROOM,
	STONE_TOWER_TEMPLE_BASEMENT,
	STONE_TOWER_TEMPLE_PRE_BOSS_ROOM,
	STONE_TOWER_TEMPLE_UPDRAFT_ROOM,
	STONE_TOWER_TEMPLE_GARO_ROOM,
	STONE_TOWER_TEMPLE_ENTRANCE,
	STOCKPOTINN,
	STOCKPOTINN_GUEST_ROOM,
	STOCKPOTINN_GRANDMA_ROOM,
	STOCKPOTINN_STAFF_ROOM,
	STOCKPOTINN_BATHROOM,
	LAUNDRY_POOL,
	LAUNDRY_POOL_KAFEI_HIDEOUT,
	FAIRY_FOUNTAIN,
	WOODFALL,
	SNOWHEAD,
	GORON_VILLAGE,
	GORON_VILLAGE_INTERIOR,
	GORON_VILLAGE_LENS_CAVE,
	GORON_VILLAGE_SHOP,
	GREAT_BAY_COAST,
	GREAT_BAY_COAST_GROTTO,
	GREAT_BAY_COAST_FISHERMAN_HUT,
	GREAT_BAY_COAST_MARINE_LAB,
	IKANA_CANYON,
	IKANA_CANYON_POE_HUT,
	IKANA_CANYON_MUSIC_HOUSE,
	IKANA_CANYON_SECRET_SHRINE_GROTTO,
	GROTTO,
	IKANA_GRAVEYARD,
	IKANA_GRAVEYARD_IRON_KNUCKLE_ROOM,
	IKANA_GRAVEYARD_KEESE_ROOM,
	IKANA_GRAVEYARD_BELOW_GRAVE,
	IKANA_GRAVEYARD_GROTTO,
	MILK_ROAD,
	MILK_ROAD_GORMAN_TRACK,
	MOUNTAIN_VILLAGE,
	MOUNTAIN_VILLAGE_SMITH,
	MOUNTAIN_VILLAGE_GRAVEYARD,
	MOUNTAIN_VILLAGE_SPRING_WATER_GROTTO,
	ROAD_TO_SNOWHEAD,
	ROAD_TO_SNOWHEAD_GROTTO,
	ROAD_TO_IKANA,
	ROAD_TO_IKANA_GROTTO,
	ROAD_TO_SOUTHERN_SWAMP,
	ROAD_TO_SOUTHERN_SWAMP_ARCHERY,
	PINNACLE_ROCK,
	ROMANI_RANCH,
	ROMANI_RANCH_DOGGY_RACETRACK,
	SOUTHERN_SWAMP,
	SOUTHERN_SWAMP_HAGS_POTION_SHOP,
	SOUTHERN_SWAMP_TOURIST_CENTER,
	SOUTHERN_SWAMP_NEAR_SPIDER_HOUSE_GROTTO,
	SOUTHERN_SWAMP_MYSTERY_WOODS_GROTTO,
	STONE_TOWER,
	TERMINA_FIELD,
	TERMINA_FIELD_OBSERVATORY,
	TERMINA_FIELD_GOSSIP_STONES_GROTTO,
	TERMINA_FIELD_BUSINESS_SCRUB_GROTTO,
	TERMINA_FIELD_PEAHAT_GROTTO,
	TERMINA_FIELD_DODONGO_GROTTO,
	TERMINA_FIELD_BIO_BABA_GROTTO,
	TERMINA_FIELD_PILLAR_GROTTO,
	TERMINA_FIELD_GRASS_GROTTO,
	TERMINA_FIELD_COW_GROTTO,
	TWIN_ISLANDS,
	TWIN_ISLANDS_SPRING_WATER_GROTTO,
	TWIN_ISLANDS_GORON_RACETRACK,
	TWIN_ISLANDS_GORON_RACETRACK_GROTTO,
	ZORA_CAPE,
	ZORA_CAPE_FAIRY_FOUNTAIN,
	ZORA_CAPE_WATERFALL_RAPIDS,
	ZORA_CAPE_GROTTO,
	ZORA_HALL,
	ZORA_HALL_SHOP,
	ZORA_HALL_LULUS_ROOM,
	ZORA_HALL_EVANS_ROOM,
	PIRATE_FORTRESS,
	PIRATE_FORTRESS_INTERIOR,
	PIRATE_FORTRESS_EXTERIOR,
	PIRATE_FORTRESS_SEWER,
	PIRATE_FORTRESS_MAZE,
	SECRET_SHRINE,
	SECRET_SHRINE_DINOLFOS_ROOM,
	SECRET_SHRINE_WIZZROBE_ROOM,
	SECRET_SHRINE_WART_ROOM,
	SECRET_SHRINE_GARO_ROOM,
	BENEATH_THE_WELL,
	BENEATH_THE_WELL_MIRROR_SHIELD_ROOM,
	BENEATH_THE_WELL_LEFT_PATH_ROOM,
	BENEATH_THE_WELL_RIGHT_PATH_ROOM,
	IKANA_CASTLE,
	IKANA_CASTLE_INTERIOR,
	IKANA_CASTLE_EXTERIOR,
	THE_MOON,
	THE_MOON_ZORA_TRIAL,
	THE_MOON_LINK_TRIAL,
	THE_MOON_GORON_TRIAL,
	THE_MOON_DEKU_TRIAL,
	THE_MOON_ENTRANCE,
	THE_MOON_BOSS_ROOM,
	SWAMP_SKULLTULA_HOUSE,
	SWAMP_SKULLTULA_HOUSE_MAIN_ROOM,
	SWAMP_SKULLTULA_HOUSE_MONUMENT_ROOM,
	SWAMP_SKULLTULA_HOUSE_GOLD_ROOM,
	SWAMP_SKULLTULA_HOUSE_POT_ROOM,
	SWAMP_SKULLTULA_HOUSE_TREE_ROOM,
	OCEANSIDE_SKULLTULA_HOUSE,
	OCEANSIDE_SKULLTULA_HOUSE_ENTRANCE,
	OCEANSIDE_SKULLTULA_HOUSE_LIBRARY,
	OCEANSIDE_SKULLTULA_HOUSE_SECOND_ROOM,
	OCEANSIDE_SKULLTULA_HOUSE_STORAGE_ROOM,
	OCEANSIDE_SKULLTULA_HOUSE_COLORED_SKULLS,
	SSH,
	SSH_MAIN_ROOM,
	SSH_MONUMENT_ROOM,
	SSH_GOLD_ROOM,
	SSH_POT_ROOM,
	SSH_TREE_ROOM.
	OSH,
	OSH_ENTRANCE,
	OSH_LIBRARY,
	OSH_SECOND_ROOM,
	OSH_STORAGE_ROOM,
	OSH_COLORED_SKULLS,
	};
	
  void AccessReset() {
    for (const AreaKey area : allAreas) {
      AreaTable(area)->ResetVariables();
    }

    if(Settings::HasNightStart) {
        if(Settings::ResolvedStartingAge == AGE_CHILD) {
          AreaTable(ROOT)->childNight = true;
        } else {
          AreaTable(ROOT)->adultNight = true;
        }
      } else {
        if(Settings::ResolvedStartingAge == AGE_CHILD) {
          AreaTable(ROOT)->childDay = true;
        } else {
          AreaTable(ROOT)->adultDay = true;
        }
    }
  }

  //Reset exits and clear items from locations
  void ResetAllLocations() {
    for (const AreaKey area : allAreas) {
      AreaTable(area)->ResetVariables();
      //Erase item from every location in this exit
      for (LocationAccess& locPair : AreaTable(area)->locations) {
          LocationKey location = locPair.GetLocation();
          Location(location)->ResetVariables();
      }
    }

    if(Settings::HasNightStart) {
        if(Settings::ResolvedStartingAge == AGE_CHILD) {
          AreaTable(ROOT)->childNight = true;
        } else {
          AreaTable(ROOT)->adultNight = true;
        }
      } else {
        if(Settings::ResolvedStartingAge == AGE_CHILD) {
          AreaTable(ROOT)->childDay = true;
        } else {
          AreaTable(ROOT)->adultDay = true;
        }
    }
  }

  bool HasTimePassAccess(u8 age) {
    for (const AreaKey areaKey : allAreas) {
      auto area = AreaTable(areaKey);
      if (area->timePass && ((age == AGE_CHILD && area->Child()) || (age == AGE_ADULT && area->Adult()))) {
        return true;
      }
    }
    return false;
  }

} //namespace Areas

Area* AreaTable(const AreaKey areaKey) {
  if (areaKey > KEY_ENUM_MAX) {
    printf("\x1b[1;1HERROR: AREAKEY TOO BIG");
  }
  return &(areaTable[areaKey]);
}

//Retrieve all the shuffable entrances of a specific type
std::vector<Entrance*> GetShuffleableEntrances(EntranceType type, bool onlyPrimary /*= true*/) {
  std::vector<Entrance*> entrancesToShuffle = {};
  for (AreaKey area: Areas::allAreas) {
    for (auto& exit: AreaTable(area)->exits) {
      if ((exit.GetType() == type || type == EntranceType::All) && (exit.IsPrimary() || !onlyPrimary) && exit.GetType() != EntranceType::None) {
        entrancesToShuffle.push_back(&exit);
      }
    }
  }
  return entrancesToShuffle;
}
